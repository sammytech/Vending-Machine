/*
 * File: SystemControl.java
 * Provides a build environment, does not implement runnable, instead is run
 * from high class SVMRun for abstraction.
 * 
 * Version 1.0
 * 
 * Authors:
 *   Michael Surdouski (mxs1649)
 *   
 *   DO NOT EDIT THIS FILE UNTIL MUCH LATER IN THE PROJECT!!!!
 */

package edu.rit.se.coolTeamB.build_run;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Scanner;

import edu.rit.se.coolTeamB.core.LocalVend;
import edu.rit.se.coolTeamB.customer.CustomerGUI;
import edu.rit.se.coolTeamB.customer.CustomerManager;
import edu.rit.se.coolTeamB.exceptions.IllegalLockOperationException;
import edu.rit.se.coolTeamB.marketing.MarketingGUI;
import edu.rit.se.coolTeamB.marketing.MarketingManager;
import edu.rit.se.coolTeamB.restocker.RestockerGUI;
import edu.rit.se.coolTeamB.restocker.RestockerManager;

/******************************************************************************
 * The <CODE>SystemControl</CODE> Java class provides total control over SVM 
 * system environment as well as holding the build for it.
 * 
 * @version
 *   1.00 21 Mar 2013
 * @author
 *   Michael Surdouski (mxs1649@rit.edu)
 ******************************************************************************/
public class SystemControl 
{
    private ArrayList<LocalVend> localVendingMachines;
    private final CustomerManager customerManager;
    private final RestockerManager restockerManager;
    private final MarketingManager marketingManager;

    /**
     * <CODE>SystemControl</CODE> initializes all the vending machines
     * 
     * @param howManMachines
     * 	 the number of machines to be made
     * @param row
     *   number of rows in the machines
     * @param col
     *   number of columns in the machines
     * @param depth
     *   depth of the machines
     */
    public SystemControl(int howManyMachines, int row, int col, int depth)
    {
	Scanner in = new Scanner(System.in);
	localVendingMachines = new ArrayList<LocalVend>(howManyMachines);
	for (int i = 0; i < howManyMachines; ++i)
	{
	    try
	    {
		localVendingMachines.add(new LocalVend(i, row, col, depth));
	    }
	    catch(Exception e)
	    {
		e.printStackTrace();
		System.out.println("Press enter to escape...");
		String exitString = in.nextLine();
		System.exit(1);
	    }
	}
	this.customerManager = new CustomerManager(localVendingMachines);
	this.restockerManager = new RestockerManager(localVendingMachines);
	this.marketingManager = new MarketingManager(localVendingMachines);
    }

    /**
     * opens the Customer interface for a vending machine
     * 
     * @param ID
     * 	 The ID of the vending machine for which the interface is being opened
     */
    public void openCustomerUI(int ID)
    {
	final int finalID = ID;
	final CustomerGUI UI = new CustomerGUI(finalID, customerManager);
	UI.addWindowListener(new WindowAdapter()
	{
	    public void windowClosing(WindowEvent e)
	    {
		if (customerManager.getLock(finalID))
		{
		    try 
		    {
			customerManager.unlock(finalID);
		    } 
		    catch (IllegalLockOperationException e1) 
		    {
			System.out.println("System lock check was different than expected.");
			e1.printStackTrace();
		    }
		}
		try
		{
		    customerManager.cancel(finalID);
		}
		catch (Exception e2)
		{
		    e2.printStackTrace();
		    System.out.println("Problem clearing shopping cart on window close.");
		}
		customerManager.deregister(UI, finalID);
	    }
	});
    }
    
    /**
     * opens the Restocker interface for a vending machine
     * 
     * @param ID
     * 	 The ID of the vending machine for which the interface is being opened
     */
    public void openRestockerUI(int ID)
    {
	final int finalID = ID;
	final RestockerGUI UI = new RestockerGUI(finalID, restockerManager);
	UI.addWindowListener(new WindowAdapter()
	{
	    public void windowClosing(WindowEvent e)
	    {
		if (restockerManager.getLock(finalID))
		{
		    try 
		    {
			restockerManager.unlock(finalID);
		    } 
		    catch (IllegalLockOperationException e1) 
		    {
			System.out.println("System lock check was different than expected.");
			e1.printStackTrace();
		    }
		}
		restockerManager.deregister(UI, finalID);
	    }
	});
    }

    /**
     * opens the Marketing interface for a vending machine
     * 
     * @param ID
     * 	 The ID of the vending machine for which the interface is being opened
     */
    public void openMarketingUI()
    {
    	final MarketingGUI UI = new MarketingGUI(marketingManager);
    }
}
